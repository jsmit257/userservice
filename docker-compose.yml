---
x-mysql-host: &mysql-host percona
x-mysql-port: &mysql-port 3306
x-mysql-user: &mysql-user root
x-mysql-pass: &mysql-pass root
x-redis-user: &redis-user redis
x-redis-pass: &redis-pass redis
x-redis-host: &redis-host redis
x-redis-port: &redis-port 6379
x-maild-host: &maild-host cffc-io
x-maild-port: &maild-port 25
x-http-host: &http-host servicetester
x-http-port: &http-port 3000
# FYI: mysql has permission problems with whomever owns this volume
# locally, and using `chown` inside Dockerfile resolves to the local 
# system's mysql user ID, not the service's; long story short, use 
# `chown 1001:1001 ./.data` on the local host, or some combination of
# `usermod` and `find -uid ??? -exec chown <local uid>:<local gid> "{}" \;`
# in Dockerfile.mysql

services:
  mysql-test:
    # a standalone userservice database. nothing here is persisted 
    # to the filesystem - use mysql-migration+mysql-persist for that.
    # you don't need to test it, since it's the build stage for 
    # mysql-persist and errors will be caught there, but it is good 
    # for testing the userservice and not leaving a mess behind
    image: jsmit257/us-db-mysql-test:latest
    build:
      context: .
      dockerfile: Dockerfile.mysql
    restart: always
    hostname: *mysql-host
    ports:
      - 6033:3306
    environment: { MYSQL_ROOT_PASSWORD: *mysql-pass }

  redis:
    # stores login information, not unlike a session, just cares about 
    # remote addresses and userid, for now; could turn into an authZ
    # service at some point
    image: redis:bookworm
    restart: always
    hostname: *redis-host
    ports: [ 6666:6379 ]

  maild:
    image: bytemark/smtp
    restart: always
    hostname: *maild-host
    env_file:
      - ./bin/env/template
      - ./bin/env/system

  serve-mysql:
    # the main service, requires some database (we don't know which, so we
    # can't set it here) and of course, redis is just redis
    depends_on:
      - redis
      # - maild
    image: jsmit257/us-srv-mysql:latest
    build: .
    hostname: *http-host
    ports: [ 3000:3000 ]
    environment:
      US_MAILD_HOST: *maild-host
      US_MAILD_PORT: *maild-port
      US_MYSQL_HOST: *mysql-host
      US_MYSQL_PORT: *mysql-port
      US_MYSQL_USER: *mysql-user
      US_MYSQL_PASSWORD: *mysql-pass
      US_HTTP_HOST: *http-host
      US_HTTP_PORT: *http-port
      US_REDIS_HOST: *redis-host
      US_REDIS_PORT: *redis-port
      US_EMAIL_TEST_MODE: true
      US_SMS_TEST_MODE: true

  us-web:
    # test harness mostly auth functions that relate to redis endpoints
    # (login/logout/valid); should add create to make it more comprehensive
    image: jsmit257/us-web:latest
    restart: always
    build:
      context: ./nginx
      dockerfile: ./Dockerfile
    ports: [ 8585:80 ]
    volumes:
      # Dockerfile copies www/login.* into the image, so the next line is 
      # for development only
      - ./nginx/www:/www

      # login.html loads custom.{js,css} from these directories, empty 
      # defaults are created by Dockerfile to prevent 404s, if you choose 
      # not to customize; adjust the host paths to fit your deployment, omit
      # any volumes you don't wish to customize
      - ./nginx/custom:/www/js
      - ./nginx/custom:/www/css
    environment:
      US_HTTP_HOST: *http-host
      US_HTTP_PORT: *http-port

  #
  # mainly for testing migration, backup and restore
  #

  mysql-persist:
    image: percona:ps-8.0.36-28
    restart: always
    hostname: mysql-persist
    volumes: [ "./persistence/data:/var/lib/mysql" ]
    environment: { MYSQL_ROOT_PASSWORD: *mysql-pass }

  mysql-initialization:
    image: jsmit257/us-db-mysql-mig:latest
    build: &build-migration
      context: .
      dockerfile: Dockerfile.mysql
      target: migration
    hostname: mysql-initialization
    volumes: [ "./persistence/data:/var/lib/mysql" ]
    environment: { MYSQL_ROOT_PASSWORD: root }
    entrypoint: /var/lib/mysql-files/install-userservice.sh mysqld

  mysql-backup:
    image: jsmit257/us-db-mysql-mig:latest
    volumes: [ "./persistence/backups:/mysqlbackup" ]
    build: *build-migration
    environment:
      USERSERVICE_BACKUP_SOURCE_HOST: mysql-persist
      USERSERVICE_BACKUP_SOURCE_PORT: *mysql-port
      USERSERVICE_BACKUP_SOURCE_USER: *mysql-user
      USERSERVICE_BACKUP_SOURCE_PASS: *mysql-pass
    entrypoint: /mysql-backup.sh

  mysql-restore:
    image: jsmit257/us-db-mysql-mig:latest
    volumes: [ "./persistence/backups:/mysqlbackup" ]
    build: *build-migration
    environment:
      USERSERVICE_RESTORE_DEST_HOST: mysql-persist
      USERSERVICE_RESTORE_DEST_PORT: *mysql-port
      USERSERVICE_RESTORE_DEST_USER: *mysql-user
      USERSERVICE_RESTORE_DEST_PASS: *mysql-pass
      RESTORE_POINT: ${RESTORE_POINT}
    entrypoint: /mysql-restore.sh
